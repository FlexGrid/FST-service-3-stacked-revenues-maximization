# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ScenarioResultInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: date=None, countries: List[object]=None):  # noqa: E501
        """ScenarioResultInner - a model defined in Swagger

        :param _date: The _date of this ScenarioResultInner.  # noqa: E501
        :type _date: date
        :param countries: The countries of this ScenarioResultInner.  # noqa: E501
        :type countries: List[object]
        """
        self.swagger_types = {
            '_date': date,
            'countries': List[object]
        }

        self.attribute_map = {
            '_date': 'date',
            'countries': 'countries'
        }
        self.__date = _date
        self._countries = countries

    @classmethod
    def from_dict(cls, dikt) -> 'ScenarioResultInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScenarioResult_inner of this ScenarioResultInner.  # noqa: E501
        :rtype: ScenarioResultInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> date:
        """Gets the _date of this ScenarioResultInner.


        :return: The _date of this ScenarioResultInner.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this ScenarioResultInner.


        :param _date: The _date of this ScenarioResultInner.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def countries(self) -> List[object]:
        """Gets the countries of this ScenarioResultInner.


        :return: The countries of this ScenarioResultInner.
        :rtype: List[object]
        """
        return self._countries

    @countries.setter
    def countries(self, countries: List[object]):
        """Sets the countries of this ScenarioResultInner.


        :param countries: The countries of this ScenarioResultInner.
        :type countries: List[object]
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")  # noqa: E501

        self._countries = countries
