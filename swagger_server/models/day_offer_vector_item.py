# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DayOfferVectorItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_timestamp: datetime=None, end_timestamp: datetime=None, price: float=None, volume: float=None):  # noqa: E501
        """DayOfferVectorItem - a model defined in Swagger

        :param start_timestamp: The start_timestamp of this DayOfferVectorItem.  # noqa: E501
        :type start_timestamp: datetime
        :param end_timestamp: The end_timestamp of this DayOfferVectorItem.  # noqa: E501
        :type end_timestamp: datetime
        :param price: The price of this DayOfferVectorItem.  # noqa: E501
        :type price: float
        :param volume: The volume of this DayOfferVectorItem.  # noqa: E501
        :type volume: float
        """
        self.swagger_types = {
            'start_timestamp': datetime,
            'end_timestamp': datetime,
            'price': float,
            'volume': float
        }

        self.attribute_map = {
            'start_timestamp': 'start_timestamp',
            'end_timestamp': 'end_timestamp',
            'price': 'price',
            'volume': 'volume'
        }
        self._start_timestamp = start_timestamp
        self._end_timestamp = end_timestamp
        self._price = price
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt) -> 'DayOfferVectorItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DayOfferVectorItem of this DayOfferVectorItem.  # noqa: E501
        :rtype: DayOfferVectorItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_timestamp(self) -> datetime:
        """Gets the start_timestamp of this DayOfferVectorItem.


        :return: The start_timestamp of this DayOfferVectorItem.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp: datetime):
        """Sets the start_timestamp of this DayOfferVectorItem.


        :param start_timestamp: The start_timestamp of this DayOfferVectorItem.
        :type start_timestamp: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self) -> datetime:
        """Gets the end_timestamp of this DayOfferVectorItem.


        :return: The end_timestamp of this DayOfferVectorItem.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp: datetime):
        """Sets the end_timestamp of this DayOfferVectorItem.


        :param end_timestamp: The end_timestamp of this DayOfferVectorItem.
        :type end_timestamp: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def price(self) -> float:
        """Gets the price of this DayOfferVectorItem.


        :return: The price of this DayOfferVectorItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this DayOfferVectorItem.


        :param price: The price of this DayOfferVectorItem.
        :type price: float
        """

        self._price = price

    @property
    def volume(self) -> float:
        """Gets the volume of this DayOfferVectorItem.


        :return: The volume of this DayOfferVectorItem.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume: float):
        """Sets the volume of this DayOfferVectorItem.


        :param volume: The volume of this DayOfferVectorItem.
        :type volume: float
        """

        self._volume = volume
