# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ScenarioParamsInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sdate: date=None, countries: List[object]=None):  # noqa: E501
        """ScenarioParamsInner - a model defined in Swagger

        :param sdate: The sdate of this ScenarioParamsInner.  # noqa: E501
        :type sdate: date
        :param countries: The countries of this ScenarioParamsInner.  # noqa: E501
        :type countries: List[object]
        """
        self.swagger_types = {
            'sdate': date,
            'countries': List[object]
        }

        self.attribute_map = {
            'sdate': 'sdate',
            'countries': 'countries'
        }
        self._sdate = sdate
        self._countries = countries

    @classmethod
    def from_dict(cls, dikt) -> 'ScenarioParamsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScenarioParams_inner of this ScenarioParamsInner.  # noqa: E501
        :rtype: ScenarioParamsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sdate(self) -> date:
        """Gets the sdate of this ScenarioParamsInner.


        :return: The sdate of this ScenarioParamsInner.
        :rtype: date
        """
        return self._sdate

    @sdate.setter
    def sdate(self, sdate: date):
        """Sets the sdate of this ScenarioParamsInner.


        :param sdate: The sdate of this ScenarioParamsInner.
        :type sdate: date
        """
        if sdate is None:
            raise ValueError("Invalid value for `sdate`, must not be `None`")  # noqa: E501

        self._sdate = sdate

    @property
    def countries(self) -> List[object]:
        """Gets the countries of this ScenarioParamsInner.


        :return: The countries of this ScenarioParamsInner.
        :rtype: List[object]
        """
        return self._countries

    @countries.setter
    def countries(self, countries: List[object]):
        """Sets the countries of this ScenarioParamsInner.


        :param countries: The countries of this ScenarioParamsInner.
        :type countries: List[object]
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")  # noqa: E501

        self._countries = countries
