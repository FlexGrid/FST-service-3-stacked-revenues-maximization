# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PriceInEuro(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: float=None, currency: str=None):  # noqa: E501
        """PriceInEuro - a model defined in Swagger

        :param value: The value of this PriceInEuro.  # noqa: E501
        :type value: float
        :param currency: The currency of this PriceInEuro.  # noqa: E501
        :type currency: str
        """
        self.swagger_types = {
            'value': float,
            'currency': str
        }

        self.attribute_map = {
            'value': 'value',
            'currency': 'currency'
        }
        self._value = value
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'PriceInEuro':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Price_In_Euro of this PriceInEuro.  # noqa: E501
        :rtype: PriceInEuro
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> float:
        """Gets the value of this PriceInEuro.


        :return: The value of this PriceInEuro.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this PriceInEuro.


        :param value: The value of this PriceInEuro.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def currency(self) -> str:
        """Gets the currency of this PriceInEuro.


        :return: The currency of this PriceInEuro.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this PriceInEuro.


        :param currency: The currency of this PriceInEuro.
        :type currency: str
        """
        allowed_values = ["â‚¬"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
