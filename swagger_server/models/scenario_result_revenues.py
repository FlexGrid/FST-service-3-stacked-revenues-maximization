# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.day_price_vector_euro import DayPriceVectorEuro  # noqa: F401,E501
from swagger_server import util


class ScenarioResultRevenues(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, day_ahead_market_revenues: DayPriceVectorEuro=None, reserve_market_revenues: DayPriceVectorEuro=None, d_lm_ps: DayPriceVectorEuro=None, q_lm_ps: DayPriceVectorEuro=None, balancing_market_revenues: DayPriceVectorEuro=None):  # noqa: E501
        """ScenarioResultRevenues - a model defined in Swagger

        :param day_ahead_market_revenues: The day_ahead_market_revenues of this ScenarioResultRevenues.  # noqa: E501
        :type day_ahead_market_revenues: DayPriceVectorEuro
        :param reserve_market_revenues: The reserve_market_revenues of this ScenarioResultRevenues.  # noqa: E501
        :type reserve_market_revenues: DayPriceVectorEuro
        :param d_lm_ps: The d_lm_ps of this ScenarioResultRevenues.  # noqa: E501
        :type d_lm_ps: DayPriceVectorEuro
        :param q_lm_ps: The q_lm_ps of this ScenarioResultRevenues.  # noqa: E501
        :type q_lm_ps: DayPriceVectorEuro
        :param balancing_market_revenues: The balancing_market_revenues of this ScenarioResultRevenues.  # noqa: E501
        :type balancing_market_revenues: DayPriceVectorEuro
        """
        self.swagger_types = {
            'day_ahead_market_revenues': DayPriceVectorEuro,
            'reserve_market_revenues': DayPriceVectorEuro,
            'd_lm_ps': DayPriceVectorEuro,
            'q_lm_ps': DayPriceVectorEuro,
            'balancing_market_revenues': DayPriceVectorEuro
        }

        self.attribute_map = {
            'day_ahead_market_revenues': 'day_ahead_market_revenues',
            'reserve_market_revenues': 'reserve_market_revenues',
            'd_lm_ps': 'd-LMPs',
            'q_lm_ps': 'q-LMPs',
            'balancing_market_revenues': 'balancing_market_revenues'
        }
        self._day_ahead_market_revenues = day_ahead_market_revenues
        self._reserve_market_revenues = reserve_market_revenues
        self._d_lm_ps = d_lm_ps
        self._q_lm_ps = q_lm_ps
        self._balancing_market_revenues = balancing_market_revenues

    @classmethod
    def from_dict(cls, dikt) -> 'ScenarioResultRevenues':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScenarioResult_revenues of this ScenarioResultRevenues.  # noqa: E501
        :rtype: ScenarioResultRevenues
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_ahead_market_revenues(self) -> DayPriceVectorEuro:
        """Gets the day_ahead_market_revenues of this ScenarioResultRevenues.


        :return: The day_ahead_market_revenues of this ScenarioResultRevenues.
        :rtype: DayPriceVectorEuro
        """
        return self._day_ahead_market_revenues

    @day_ahead_market_revenues.setter
    def day_ahead_market_revenues(self, day_ahead_market_revenues: DayPriceVectorEuro):
        """Sets the day_ahead_market_revenues of this ScenarioResultRevenues.


        :param day_ahead_market_revenues: The day_ahead_market_revenues of this ScenarioResultRevenues.
        :type day_ahead_market_revenues: DayPriceVectorEuro
        """

        self._day_ahead_market_revenues = day_ahead_market_revenues

    @property
    def reserve_market_revenues(self) -> DayPriceVectorEuro:
        """Gets the reserve_market_revenues of this ScenarioResultRevenues.


        :return: The reserve_market_revenues of this ScenarioResultRevenues.
        :rtype: DayPriceVectorEuro
        """
        return self._reserve_market_revenues

    @reserve_market_revenues.setter
    def reserve_market_revenues(self, reserve_market_revenues: DayPriceVectorEuro):
        """Sets the reserve_market_revenues of this ScenarioResultRevenues.


        :param reserve_market_revenues: The reserve_market_revenues of this ScenarioResultRevenues.
        :type reserve_market_revenues: DayPriceVectorEuro
        """

        self._reserve_market_revenues = reserve_market_revenues

    @property
    def d_lm_ps(self) -> DayPriceVectorEuro:
        """Gets the d_lm_ps of this ScenarioResultRevenues.


        :return: The d_lm_ps of this ScenarioResultRevenues.
        :rtype: DayPriceVectorEuro
        """
        return self._d_lm_ps

    @d_lm_ps.setter
    def d_lm_ps(self, d_lm_ps: DayPriceVectorEuro):
        """Sets the d_lm_ps of this ScenarioResultRevenues.


        :param d_lm_ps: The d_lm_ps of this ScenarioResultRevenues.
        :type d_lm_ps: DayPriceVectorEuro
        """

        self._d_lm_ps = d_lm_ps

    @property
    def q_lm_ps(self) -> DayPriceVectorEuro:
        """Gets the q_lm_ps of this ScenarioResultRevenues.


        :return: The q_lm_ps of this ScenarioResultRevenues.
        :rtype: DayPriceVectorEuro
        """
        return self._q_lm_ps

    @q_lm_ps.setter
    def q_lm_ps(self, q_lm_ps: DayPriceVectorEuro):
        """Sets the q_lm_ps of this ScenarioResultRevenues.


        :param q_lm_ps: The q_lm_ps of this ScenarioResultRevenues.
        :type q_lm_ps: DayPriceVectorEuro
        """

        self._q_lm_ps = q_lm_ps

    @property
    def balancing_market_revenues(self) -> DayPriceVectorEuro:
        """Gets the balancing_market_revenues of this ScenarioResultRevenues.


        :return: The balancing_market_revenues of this ScenarioResultRevenues.
        :rtype: DayPriceVectorEuro
        """
        return self._balancing_market_revenues

    @balancing_market_revenues.setter
    def balancing_market_revenues(self, balancing_market_revenues: DayPriceVectorEuro):
        """Sets the balancing_market_revenues of this ScenarioResultRevenues.


        :param balancing_market_revenues: The balancing_market_revenues of this ScenarioResultRevenues.
        :type balancing_market_revenues: DayPriceVectorEuro
        """

        self._balancing_market_revenues = balancing_market_revenues
