# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PricingParamsPowerVector(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_timestamp: datetime=None, end_timestamp: datetime=None, power: float=None):  # noqa: E501
        """PricingParamsPowerVector - a model defined in Swagger

        :param start_timestamp: The start_timestamp of this PricingParamsPowerVector.  # noqa: E501
        :type start_timestamp: datetime
        :param end_timestamp: The end_timestamp of this PricingParamsPowerVector.  # noqa: E501
        :type end_timestamp: datetime
        :param power: The power of this PricingParamsPowerVector.  # noqa: E501
        :type power: float
        """
        self.swagger_types = {
            'start_timestamp': datetime,
            'end_timestamp': datetime,
            'power': float
        }

        self.attribute_map = {
            'start_timestamp': 'start_timestamp',
            'end_timestamp': 'end_timestamp',
            'power': 'power'
        }
        self._start_timestamp = start_timestamp
        self._end_timestamp = end_timestamp
        self._power = power

    @classmethod
    def from_dict(cls, dikt) -> 'PricingParamsPowerVector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PricingParams_power_vector of this PricingParamsPowerVector.  # noqa: E501
        :rtype: PricingParamsPowerVector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_timestamp(self) -> datetime:
        """Gets the start_timestamp of this PricingParamsPowerVector.


        :return: The start_timestamp of this PricingParamsPowerVector.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp: datetime):
        """Sets the start_timestamp of this PricingParamsPowerVector.


        :param start_timestamp: The start_timestamp of this PricingParamsPowerVector.
        :type start_timestamp: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self) -> datetime:
        """Gets the end_timestamp of this PricingParamsPowerVector.


        :return: The end_timestamp of this PricingParamsPowerVector.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp: datetime):
        """Sets the end_timestamp of this PricingParamsPowerVector.


        :param end_timestamp: The end_timestamp of this PricingParamsPowerVector.
        :type end_timestamp: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def power(self) -> float:
        """Gets the power of this PricingParamsPowerVector.


        :return: The power of this PricingParamsPowerVector.
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power: float):
        """Sets the power of this PricingParamsPowerVector.


        :param power: The power of this PricingParamsPowerVector.
        :type power: float
        """

        self._power = power
