# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server.models.pricing_params_power_vector import PricingParamsPowerVector  # noqa: F401,E501
from swagger_server import util


class PricingParamsCurtailableLoads(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, consumer_id: str=None, unit: str=None, power_vector: List[PricingParamsPowerVector]=None, location: Location=None):  # noqa: E501
        """PricingParamsCurtailableLoads - a model defined in Swagger

        :param consumer_id: The consumer_id of this PricingParamsCurtailableLoads.  # noqa: E501
        :type consumer_id: str
        :param unit: The unit of this PricingParamsCurtailableLoads.  # noqa: E501
        :type unit: str
        :param power_vector: The power_vector of this PricingParamsCurtailableLoads.  # noqa: E501
        :type power_vector: List[PricingParamsPowerVector]
        :param location: The location of this PricingParamsCurtailableLoads.  # noqa: E501
        :type location: Location
        """
        self.swagger_types = {
            'consumer_id': str,
            'unit': str,
            'power_vector': List[PricingParamsPowerVector],
            'location': Location
        }

        self.attribute_map = {
            'consumer_id': 'consumer_id',
            'unit': 'unit',
            'power_vector': 'power_vector',
            'location': 'location'
        }
        self._consumer_id = consumer_id
        self._unit = unit
        self._power_vector = power_vector
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'PricingParamsCurtailableLoads':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PricingParams_curtailable_loads of this PricingParamsCurtailableLoads.  # noqa: E501
        :rtype: PricingParamsCurtailableLoads
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_id(self) -> str:
        """Gets the consumer_id of this PricingParamsCurtailableLoads.


        :return: The consumer_id of this PricingParamsCurtailableLoads.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id: str):
        """Sets the consumer_id of this PricingParamsCurtailableLoads.


        :param consumer_id: The consumer_id of this PricingParamsCurtailableLoads.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def unit(self) -> str:
        """Gets the unit of this PricingParamsCurtailableLoads.


        :return: The unit of this PricingParamsCurtailableLoads.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this PricingParamsCurtailableLoads.


        :param unit: The unit of this PricingParamsCurtailableLoads.
        :type unit: str
        """
        allowed_values = ["KW"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def power_vector(self) -> List[PricingParamsPowerVector]:
        """Gets the power_vector of this PricingParamsCurtailableLoads.


        :return: The power_vector of this PricingParamsCurtailableLoads.
        :rtype: List[PricingParamsPowerVector]
        """
        return self._power_vector

    @power_vector.setter
    def power_vector(self, power_vector: List[PricingParamsPowerVector]):
        """Sets the power_vector of this PricingParamsCurtailableLoads.


        :param power_vector: The power_vector of this PricingParamsCurtailableLoads.
        :type power_vector: List[PricingParamsPowerVector]
        """

        self._power_vector = power_vector

    @property
    def location(self) -> Location:
        """Gets the location of this PricingParamsCurtailableLoads.


        :return: The location of this PricingParamsCurtailableLoads.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """Sets the location of this PricingParamsCurtailableLoads.


        :param location: The location of this PricingParamsCurtailableLoads.
        :type location: Location
        """

        self._location = location
