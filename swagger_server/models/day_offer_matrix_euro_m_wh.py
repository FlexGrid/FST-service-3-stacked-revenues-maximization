# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.day_offer_matrix_euro_m_wh_per_price_vector import DayOfferMatrixEuroMWhPerPriceVector  # noqa: F401,E501
from swagger_server.models.day_offer_matrix_euro_m_wh_values1 import DayOfferMatrixEuroMWhValues1  # noqa: F401,E501
from swagger_server import util


class DayOfferMatrixEuroMWh(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, values: List[DayOfferMatrixEuroMWhValues1]=None, per_price_vector: List[DayOfferMatrixEuroMWhPerPriceVector]=None, price_unit: str=None, volume_unit: str=None):  # noqa: E501
        """DayOfferMatrixEuroMWh - a model defined in Swagger

        :param values: The values of this DayOfferMatrixEuroMWh.  # noqa: E501
        :type values: List[DayOfferMatrixEuroMWhValues1]
        :param per_price_vector: The per_price_vector of this DayOfferMatrixEuroMWh.  # noqa: E501
        :type per_price_vector: List[DayOfferMatrixEuroMWhPerPriceVector]
        :param price_unit: The price_unit of this DayOfferMatrixEuroMWh.  # noqa: E501
        :type price_unit: str
        :param volume_unit: The volume_unit of this DayOfferMatrixEuroMWh.  # noqa: E501
        :type volume_unit: str
        """
        self.swagger_types = {
            'values': List[DayOfferMatrixEuroMWhValues1],
            'per_price_vector': List[DayOfferMatrixEuroMWhPerPriceVector],
            'price_unit': str,
            'volume_unit': str
        }

        self.attribute_map = {
            'values': 'values',
            'per_price_vector': 'per_price_vector',
            'price_unit': 'price_unit',
            'volume_unit': 'volume_unit'
        }
        self._values = values
        self._per_price_vector = per_price_vector
        self._price_unit = price_unit
        self._volume_unit = volume_unit

    @classmethod
    def from_dict(cls, dikt) -> 'DayOfferMatrixEuroMWh':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DayOfferMatrixEuroMWh of this DayOfferMatrixEuroMWh.  # noqa: E501
        :rtype: DayOfferMatrixEuroMWh
        """
        return util.deserialize_model(dikt, cls)

    @property
    def values(self) -> List[DayOfferMatrixEuroMWhValues1]:
        """Gets the values of this DayOfferMatrixEuroMWh.


        :return: The values of this DayOfferMatrixEuroMWh.
        :rtype: List[DayOfferMatrixEuroMWhValues1]
        """
        return self._values

    @values.setter
    def values(self, values: List[DayOfferMatrixEuroMWhValues1]):
        """Sets the values of this DayOfferMatrixEuroMWh.


        :param values: The values of this DayOfferMatrixEuroMWh.
        :type values: List[DayOfferMatrixEuroMWhValues1]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def per_price_vector(self) -> List[DayOfferMatrixEuroMWhPerPriceVector]:
        """Gets the per_price_vector of this DayOfferMatrixEuroMWh.


        :return: The per_price_vector of this DayOfferMatrixEuroMWh.
        :rtype: List[DayOfferMatrixEuroMWhPerPriceVector]
        """
        return self._per_price_vector

    @per_price_vector.setter
    def per_price_vector(self, per_price_vector: List[DayOfferMatrixEuroMWhPerPriceVector]):
        """Sets the per_price_vector of this DayOfferMatrixEuroMWh.


        :param per_price_vector: The per_price_vector of this DayOfferMatrixEuroMWh.
        :type per_price_vector: List[DayOfferMatrixEuroMWhPerPriceVector]
        """

        self._per_price_vector = per_price_vector

    @property
    def price_unit(self) -> str:
        """Gets the price_unit of this DayOfferMatrixEuroMWh.


        :return: The price_unit of this DayOfferMatrixEuroMWh.
        :rtype: str
        """
        return self._price_unit

    @price_unit.setter
    def price_unit(self, price_unit: str):
        """Sets the price_unit of this DayOfferMatrixEuroMWh.


        :param price_unit: The price_unit of this DayOfferMatrixEuroMWh.
        :type price_unit: str
        """
        allowed_values = ["â‚¬/MWh"]  # noqa: E501
        if price_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `price_unit` ({0}), must be one of {1}"
                .format(price_unit, allowed_values)
            )

        self._price_unit = price_unit

    @property
    def volume_unit(self) -> str:
        """Gets the volume_unit of this DayOfferMatrixEuroMWh.


        :return: The volume_unit of this DayOfferMatrixEuroMWh.
        :rtype: str
        """
        return self._volume_unit

    @volume_unit.setter
    def volume_unit(self, volume_unit: str):
        """Sets the volume_unit of this DayOfferMatrixEuroMWh.


        :param volume_unit: The volume_unit of this DayOfferMatrixEuroMWh.
        :type volume_unit: str
        """
        allowed_values = ["MWh", "kWh"]  # noqa: E501
        if volume_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_unit` ({0}), must be one of {1}"
                .format(volume_unit, allowed_values)
            )

        self._volume_unit = volume_unit
