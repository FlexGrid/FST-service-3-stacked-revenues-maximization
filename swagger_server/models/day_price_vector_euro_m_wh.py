# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.day_price_vector import DayPriceVector  # noqa: F401,E501
from swagger_server import util


class DayPriceVectorEuroMWh(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, values: DayPriceVector=None, unit: str=None):  # noqa: E501
        """DayPriceVectorEuroMWh - a model defined in Swagger

        :param values: The values of this DayPriceVectorEuroMWh.  # noqa: E501
        :type values: DayPriceVector
        :param unit: The unit of this DayPriceVectorEuroMWh.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'values': DayPriceVector,
            'unit': str
        }

        self.attribute_map = {
            'values': 'values',
            'unit': 'unit'
        }
        self._values = values
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'DayPriceVectorEuroMWh':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DayPriceVector_Euro_MWh of this DayPriceVectorEuroMWh.  # noqa: E501
        :rtype: DayPriceVectorEuroMWh
        """
        return util.deserialize_model(dikt, cls)

    @property
    def values(self) -> DayPriceVector:
        """Gets the values of this DayPriceVectorEuroMWh.


        :return: The values of this DayPriceVectorEuroMWh.
        :rtype: DayPriceVector
        """
        return self._values

    @values.setter
    def values(self, values: DayPriceVector):
        """Sets the values of this DayPriceVectorEuroMWh.


        :param values: The values of this DayPriceVectorEuroMWh.
        :type values: DayPriceVector
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def unit(self) -> str:
        """Gets the unit of this DayPriceVectorEuroMWh.


        :return: The unit of this DayPriceVectorEuroMWh.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this DayPriceVectorEuroMWh.


        :param unit: The unit of this DayPriceVectorEuroMWh.
        :type unit: str
        """
        allowed_values = ["â‚¬/MWh"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
